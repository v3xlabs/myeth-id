name: Deploy

on:
  push:
    branches:
      - master

jobs:
  build-container:
    runs-on:
      group: ubuntu-runners
    strategy:
      matrix:
        file: [Dockerfile]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # selecting a toolchain either by action or manual `rustup` calls should happen
      # before the plugin, as the cache uses the current rustc version as its cache key
      - run: rustup toolchain install stable --profile minimal

      - uses: Swatinem/rust-cache@v2
        # with:
          # The prefix cache key, this can be changed to start a new cache manually.
          # default: "v0-rust"
          # prefix-key: ""

          # A cache key that is used instead of the automatic `job`-based key,
          # and is stable over multiple jobs.
          # default: empty
          # shared-key: ""

          # An additional cache key that is added alongside the automatic `job`-based
          # cache key and can be used to further differentiate jobs.
          # default: empty
          # key: ""

          # A whitespace separated list of env-var *prefixes* who's value contributes
          # to the environment cache key.
          # The env-vars are matched by *prefix*, so the default `RUST` var will
          # match all of `RUSTC`, `RUSTUP_*`, `RUSTFLAGS`, `RUSTDOC_*`, etc.
          # default: "CARGO CC CFLAGS CXX CMAKE RUST"
          # env-vars: ""

          # The cargo workspaces and target directory configuration.
          # These entries are separated by newlines and have the form
          # `$workspace -> $target`. The `$target` part is treated as a directory
          # relative to the `$workspace` and defaults to "target" if not explicitly given.
          # default: ". -> target"
          # workspaces: ""

          # Additional non workspace directories to be cached, separated by newlines.
          # cache-directories: ""

          # Determines whether workspace `target` directories are cached.
          # If `false`, only the cargo registry will be cached.
          # default: "true"
          # cache-targets: ""

          # Determines if the cache should be saved even when the workflow has failed.
          # default: "false"
          # cache-on-failure: ""

          # Determines which crates are cached.
          # If `true` all crates will be cached, otherwise only dependent crates will be cached.
          # Useful if additional crates are used for CI tooling.
          # default: "false"
          # cache-all-crates: ""

          # Determiners whether the cache should be saved.
          # If `false`, the cache is only restored.
          # Useful for jobs where the matrix is additive e.g. additional Cargo features,
          # or when only runs from `master` should be saved to the cache.
          # default: "true"
          # save-if: ""
          # To only cache runs from `master`:
          # save-if: ${{ github.ref == 'refs/head/master' }}

          # Specifies what to use as the backend providing cache
          # Can be set to either "github" or "buildjet"
          # default: "github"
          # cache-provider: ""

      - run: |
          cargo build --release
        # working-directory: tests

      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      #     logout: false

      # - name: Set tag suffix
      #   id: suffix
      #   run: |
      #     if [[ "${{ matrix.file }}" == *.* ]]; then
      #       echo "::set-output name=suffix:::$(echo "${{ matrix.file }}" | cut -d'.' -f1)"
      #     else
      #       echo "::set-output name=suffix::"
      #     fi

      # - name: Docker meta
      #   id: meta
      #   uses: docker/metadata-action@v4
      #   with:
      #     images: |
      #       ghcr.io/${{ github.repository }}
      #     flavor: |
      #       latest=auto
      #     tags: |
      #       type=raw,value=${{ github.sha }},suffix=${{ steps.suffix.outputs.suffix }}

      # # Setup Buildkit
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Build, tag, and push image
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     file: ${{ matrix.file }}
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
